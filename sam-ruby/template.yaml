AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  It is what it is
Globals:
  Function:
    Timeout: 30

Resources:
  PostApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Domain:
        DomainName: api.scotty.dance
        CertificateArn: arn:aws:acm:us-east-1:305167691271:certificate/aa0dad8d-1fb9-45fb-84b4-67501e79ba2a

  StartServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.MinecraftServerController.start
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /minecraft/start
            Method: post

  GetServerState:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.MinecraftServerController.state
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /minecraft/state
            Method: get

  GetPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.PostController.get
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /posts/{id}
            Method: get
            RequestParameters:
              method.request.path.id:
                Required: false
                Caching: false
  GetPosts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.PostController.get
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /posts
            Method: get

  CreatePost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.PostController.create
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /posts/create
            Method: post

  EditPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.PostController.edit
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /posts/edit/{id}
            Method: get
            RequestParameters:
              method.request.path.id:
                Required: true
                Caching: false

  DeletePost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.PostController.delete
      Runtime: ruby2.5
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref PostApi
            Path: /posts/delete/{id}
            Method: delete
            RequestParameters:
              method.request.path.id:
                Required: true
                Caching: false

  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: posts
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: post_type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: post_type-index
          KeySchema:
            - AttributeName: post_type
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PostsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: posts-scotty-dot-dance
      VersioningConfiguration:
        Status: Enabled

  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: media-scotty-dot-dance
      AccessControl: PublicRead
